# configs/config.sample.yaml
#
# This file provides a full, commented example of all available configuration
# options for the RL trading agent. Use this as a reference to build your
# own `config.yaml` in the project root.

# 1. AGENT TYPE
#    Specify the RL algorithm to use. This determines which `..._params.yaml`
#    file is loaded from the `configs/defaults/` directory.
#    Supported types: PPO, SAC, DDPG, A2C, RecurrentPPO
agent_type: "PPO"

# 2. RUN SETTINGS
#    Central configuration for data periods, logging, and model identification.
#    These settings are loaded from `configs/defaults/run_settings.yaml` and
#    can be overridden here.
run_settings:
  # --- Core Identification ---
  model_name: "my_ppo_agent_v1"
  env_type: "simple" # 'simple' or a filename from src/environments/experiments/

  # --- Logging & Device ---
  log_level: "normal" # "none", "normal", or "detailed"
  device: "auto" # "auto", "cpu", or "cuda"

  # --- Data & Symbol ---
  default_symbol: "BTCUSDT"
  historical_interval: "1h"
  historical_cache_dir: "data_cache/"

  # --- Training & Evaluation Periods ---
  start_date_train: "2024-01-01 00:00:00"
  end_date_train: "2024-01-31 23:59:59"
  start_date_eval: "2024-02-01 00:00:00"
  end_date_eval: "2024-02-07 23:59:59"

# 3. ENVIRONMENT CONFIGURATION
#    Parameters defining the trading environment's observation space,
#    rewards, and core trading rules.
environment:
  # --- Observation Space ---
  kline_window_size: 20
  tick_feature_window_size: 50
  tick_resample_interval_ms: 1000 # Resample ticks to 1-second intervals

  # --- Technical Analysis (TA) Features ---
  # Uncomment and configure the indicators you want to use.
  # The `function` key maps to a TA-Lib function.
  # The `params` key holds the function's parameters.
  # The `output_field` key is used for functions that return multiple values (e.g., BBANDS).
  kline_price_features:
    # --- Base OHLCV (Almost always required) ---
    Open: {}
    High: {}
    Low: {}
    Close: {}
    Volume: {}

    EMA_High_10:
      function: "EMA"
      params:
        timeperiod: 10
      data_source: "High" # Use the 'High' price as input for the EMA

    # --- EMA on Low prices ---
    EMA_Low_10:
      function: "EMA"
      params:
        timeperiod: 10
      data_source: "Low" # Use the 'Low' price as input for the EMA

    # --- A standard EMA on Close prices (for comparison) ---
    # Note: 'data_source' is not needed here as it defaults to "Close"
    EMA_Close_10:
      function: "EMA"
      params:
        timeperiod: 10

    # --- Overlap Studies ---
    # SMA_10: { function: "SMA", params: { timeperiod: 10 } }
    # EMA_20: { function: "EMA", params: { timeperiod: 20 } }
    # WMA_30: { function: "WMA", params: { timeperiod: 30 } }
    # DEMA_14: { function: "DEMA", params: { timeperiod: 14 } }
    # TEMA_14: { function: "TEMA", params: { timeperiod: 14 } }
    # KAMA_14: { function: "KAMA", params: { timeperiod: 14 } }
    # SAR: { function: "SAR", params: { acceleration: 0.02, maximum: 0.2 } }
    # BBANDS_Upper: { function: "BBANDS", params: { timeperiod: 20, nbdevup: 2, nbdevdn: 2 }, output_field: 0 }
    # BBANDS_Middle: { function: "BBANDS", params: { timeperiod: 20, nbdevup: 2, nbdevdn: 2 }, output_field: 1 }
    # BBANDS_Lower: { function: "BBANDS", params: { timeperiod: 20, nbdevup: 2, nbdevdn: 2 }, output_field: 2 }

    # --- Momentum Indicators ---
    # RSI_14: { function: "RSI", params: { timeperiod: 14 } }
    # ADX_14: { function: "ADX", params: { timeperiod: 14 } }
    # AROONOSC_14: { function: "AROONOSC", params: { timeperiod: 14 } }
    # CCI_14: { function: "CCI", params: { timeperiod: 14 } }
    # CMO_14: { function: "CMO", params: { timeperiod: 14 } }
    # MOM_10: { function: "MOM", params: { timeperiod: 10 } }
    # PPO: { function: "PPO", params: { fastperiod: 12, slowperiod: 26, matype: 0 } }
    # ROC_10: { function: "ROC", params: { timeperiod: 10 } }
    # WILLR_14: { function: "WILLR", params: { timeperiod: 14 } }
    # MACD_Line: { function: "MACD", params: { fastperiod: 12, slowperiod: 26, signalperiod: 9 }, output_field: 0 }
    # MACD_Signal: { function: "MACD", params: { fastperiod: 12, slowperiod: 26, signalperiod: 9 }, output_field: 1 }
    # MACD_Hist: { function: "MACD", params: { fastperiod: 12, slowperiod: 26, signalperiod: 9 }, output_field: 2 }
    # STOCH_SlowK: { function: "STOCH", params: { fastk_period: 5, slowk_period: 3, slowk_matype: 0, slowd_period: 3, slowd_matype: 0 }, output_field: 0 }
    # STOCH_SlowD: { function: "STOCH", params: { fastk_period: 5, slowk_period: 3, slowk_matype: 0, slowd_period: 3, slowd_matype: 0 }, output_field: 1 }

    # --- Volume Indicators ---
    # AD: { function: "AD", params: {} }
    # ADOSC: { function: "ADOSC", params: { fastperiod: 3, slowperiod: 10 } }
    # OBV: { function: "OBV", params: {} }

    # --- Volatility Indicators ---
    # ATR_14: { function: "ATR", params: { timeperiod: 14 } }
    # NATR_14: { function: "NATR", params: { timeperiod: 14 } }
    # TRANGE: { function: "TRANGE", params: {} }
    
    # --- Candlestick Patterns (no params needed) ---
    # CDL2CROWS: { function: "CDL2CROWS", params: {} }
    # CDL3BLACKCROWS: { function: "CDL3BLACKCROWS", params: {} }
    # CDL3INSIDE: { function: "CDL3INSIDE", params: {} }
    # CDL3LINESTRIKE: { function: "CDL3LINESTRIKE", params: {} }
    # CDL3OUTSIDE: { function: "CDL3OUTSIDE", params: {} }
    # CDL3STARSINSOUTH: { function: "CDL3STARSINSOUTH", params: {} }
    # CDL3WHITESOLDIERS: { function: "CDL3WHITESOLDIERS", params: {} }
    # CDLABANDONEDBABY: { function: "CDLABANDONEDBABY", params: {} }
    # CDLADVANCEBLOCK: { function: "CDLADVANCEBLOCK", params: {} }
    # CDLBELTHOLD: { function: "CDLBELTHOLD", params: {} }
    # CDLBREAKAWAY: { function: "CDLBREAKAWAY", params: {} }
    # CDLCLOSINGMARUBOZU: { function: "CDLCLOSINGMARUBOZU", params: {} }
    # CDLCONCEALBABYSWALL: { function: "CDLCONCEALBABYSWALL", params: {} }
    # CDLCOUNTERATTACK: { function: "CDLCOUNTERATTACK", params: {} }
    # CDLDARKCLOUDCOVER: { function: "CDLDARKCLOUDCOVER", params: {} }
    # CDLDOJI: { function: "CDLDOJI", params: {} }
    # CDLDOJISTAR: { function: "CDLDOJISTAR", params: {} }
    # CDLDRAGONFLYDOJI: { function: "CDLDRAGONFLYDOJI", params: {} }
    # CDLENGULFING: { function: "CDLENGULFING", params: {} }
    # CDLEVENINGDOJISTAR: { function: "CDLEVENINGDOJISTAR", params: {} }
    # CDLEVENINGSTAR: { function: "CDLEVENINGSTAR", params: {} }
    # CDLGAPSIDESIDEWHITE: { function: "CDLGAPSIDESIDEWHITE", params: {} }
    # CDLGRAVESTONEDOJI: { function: "CDLGRAVESTONEDOJI", params: {} }
    # CDLHAMMER: { function: "CDLHAMMER", params: {} }
    # CDLHANGINGMAN: { function: "CDLHANGINGMAN", params: {} }
    # CDLHARAMI: { function: "CDLHARAMI", params: {} }
    # CDLHARAMICROSS: { function: "CDLHARAMICROSS", params: {} }
    # CDLHIGHWAVE: { function: "CDLHIGHWAVE", params: {} }
    # CDLHIKKAKE: { function: "CDLHIKKAKE", params: {} }
    # CDLHIKKAKEMOD: { function: "CDLHIKKAKEMOD", params: {} }
    # CDLHOMINGPIGEON: { function: "CDLHOMINGPIGEON", params: {} }
    # CDLIDENTICAL3CROWS: { function: "CDLIDENTICAL3CROWS", params: {} }
    # CDLINNECK: { function: "CDLINNECK", params: {} }
    # CDLINVERTEDHAMMER: { function: "CDLINVERTEDHAMMER", params: {} }
    # CDLKICKING: { function: "CDLKICKING", params: {} }
    # CDLKICKINGBYLENGTH: { function: "CDLKICKINGBYLENGTH", params: {} }
    # CDLLADDERBOTTOM: { function: "CDLLADDERBOTTOM", params: {} }
    # CDLLONGLEGGEDDOJI: { function: "CDLLONGLEGGEDDOJI", params: {} }
    # CDLLONGLINE: { function: "CDLLONGLINE", params: {} }
    # CDLMARUBOZU: { function: "CDLMARUBOZU", params: {} }
    # CDLMATCHINGLOW: { function: "CDLMATCHINGLOW", params: {} }
    # CDLMATHOLD: { function: "CDLMATHOLD", params: {} }
    # CDLMORNINGDOJISTAR: { function: "CDLMORNINGDOJISTAR", params: {} }
    # CDLMORNINGSTAR: { function: "CDLMORNINGSTAR", params: {} }
    # CDLONNECK: { function: "CDLONNECK", params: {} }
    # CDLPIERCING: { function: "CDLPIERCING", params: {} }
    # CDLRICKSHAWMAN: { function: "CDLRICKSHAWMAN", params: {} }
    # CDLRISEFALL3METHODS: { function: "CDLRISEFALL3METHODS", params: {} }
    # CDLSEPARATINGLINES: { function: "CDLSEPARATINGLINES", params: {} }
    # CDLSHOOTINGSTAR: { function: "CDLSHOOTINGSTAR", params: {} }
    # CDLSHORTLINE: { function: "CDLSHORTLINE", params: {} }
    # CDLSPINNINGTOP: { function: "CDLSPINNINGTOP", params: {} }
    # CDLSTALLEDPATTERN: { function: "CDLSTALLEDPATTERN", params: {} }
    # CDLSTICKSANDWICH: { function: "CDLSTICKSANDWICH", params: {} }
    # CDLTAKURI: { function: "CDLTAKURI", params: {} }
    # CDLTASUKIGAP: { function: "CDLTASUKIGAP", params: {} }
    # CDLTHRUSTING: { function: "CDLTHRUSTING", params: {} }
    # CDLTRISTAR: { function: "CDLTRISTAR", params: {} }
    # CDLUNIQUE3RIVER: { function: "CDLUNIQUE3RIVER", params: {} }
    # CDLUPSIDEGAP2CROWS: { function: "CDLUPSIDEGAP2CROWS", params: {} }
    # CDLXSIDEGAP3METHODS: { function: "CDLXSIDEGAP3METHODS", params: {} }


# 4. ALGORITHM PARAMETERS
#    Override any specific hyperparameters for the chosen `agent_type`.
#    This section should match the `agent_type` specified above.
ppo_params:
  total_timesteps: 5000000
  learning_rate: 0.0001
  n_steps: 4096
  batch_size: 128
  ent_coef: 0.02

# You can add other sections like `sac_params`, `a2c_params`, etc.
# if you were using a different agent_type.
#
# sac_params:
#  learning_rate: 0.0005
#  buffer_size: 2000000